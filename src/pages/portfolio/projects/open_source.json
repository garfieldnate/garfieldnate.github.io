[
    {
        "name": "Rust Ray Tracer",
        "description": "Following Jamis Buck's excellent <a href=\"http://raytracerchallenge.com/\">Ray Tracer Challenge</a>, I wrote a CPU ray tracer with features including soft shadows, texture mapping, and constructive solid geometry.",
        "repo": "https://github.com/garfieldnate/ray_tracer_challenge",
        "img_src": "/assets/portfolio/ray_tracer_demo.jpg",
        "img_alt": "A render of two shiny marbles, one red and one blue, with a reflection of a square light on their surfaces and their fuzzy shadows receding in the background"
    },
    {
        "name": "Analogical Modeling Weka Plugin",
        "description": "The state-of-the-art implementation of <a href=\"https://en.wikipedia.org/wiki/Analogical_modeling\">analogical modeling</a>, an exemplar-based machine learning algorithm. Higher-cardinality data is processed in parallel via Java's fork/join framework and Monte Carlo simulation.",
        "repo": "https://github.com/garfieldnate/Weka_AnalogicalModeling",
        "img_src": "/assets/portfolio/weka_am.png",
        "img_alt": "A screenshot showing the output of the analogical modeling plugin in the Weka toolkit"
    },
    {
        "name": "Algorithm::AM",
        "description": "A Perl library for <a href=\"https://en.wikipedia.org/wiki/Analogical_modeling\">analogical modeling</a>, an exemplar-based machine learning algorithm. I rewrote the Perl code and modernized the C code of AM::Parallel, fixing tricky bugs and adding complete unit test coverage along the way.",
        "repo": "https://github.com/garfieldnate/Algorithm-AM",
        "img_src": "/assets/portfolio/Analogical_modeling_pointer_network.png",
        "img_alt": "A diagram of pointers between contexts, the central calculation of analogical modeling"
    },
    {
        "name": "Tree::BK",
        "description": "Perl module implementing a Burkhard-Keller, or BK tree, a structure for efficiently performing fuzzy searches in a large collection of strings.",
        "repo": "https://github.com/garfieldnate/p5-Tree-BK",
        "img_src": "/assets/portfolio/BK_tree.png",
        "img_alt": "A diagram of a BK tree containing the words wit, with, whit, white, side, wind, sink and lisp"
    },
    {
        "name": "LeXiTron Mac",
        "description": "A distribution of the Thai Government's <a href=\"https://lexitron.nectec.or.th/\">LEXiTRON</a> Thai/English dictionary for use on Macintosh computers (three-finger click, dictionary.app, etc.).",
        "repo": "https://github.com/garfieldnate/Lexitron-Mac",
        "img_src": "/assets/portfolio/LEXiTRON_Mac.png",
        "img_alt": "\"Apple\" spelled in Thai, with one of the letters replaced with the Apple logo"
    },
    {
        "name": "Soar Tokenizer",
        "description": "<a href=\"https://soar.eecs.umich.edu/\">Soar</a> is a general cognitive architecture for intelligent behavior. As an open source collaborator I updated the tokenizing component with a simpler API, as well as contributing bug fixes.",
        "repo": "https://github.com/SoarGroup/Soar",
        "img_src": "/assets/portfolio/Soar_logo.png",
        "img_alt": "The Soar logo",
        "copyright": "SoarGroup 2020",
        "license": "<a href=\"https://opensource.org/licenses/BSD-2-Clause\">BSD-2</a>"
    },
    {
        "name": "Sublime Soar Tools",
        "description": "A <a href=\"https://www.sublimetext.com/\">Sublime Text</a> package for developing <a href=\"https://soar.eecs.umich.edu/\">Soar</a> code. Includes support for syntax highlighting, snippets, and unit testing with SoarUnit.",
        "repo": "https://github.com/garfieldnate/Sublime-Soar-Tools",
        "img_src": "/assets/portfolio/sublime_soar_rosie.jpg",
        "img_alt": "Slanted photo of Soar code with syntax highlighting in Sublime Text"
    }
]
